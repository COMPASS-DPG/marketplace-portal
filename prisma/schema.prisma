// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Here goes models

enum CourseProgressStatus {
  inProgress
  completed
}

enum NotificationStatus {
  viewed
  notViewed
}

model ConsumerMetadata {
  consumerId        String                    @id 
  walletId          Int                       @unique
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  savedCourses      Int[]                     @default([])
  notifications     Notification[]        
  wallet            Wallet                    @relation(fields: [walletId], references: [walletId])
  coursesPurchased  ConsumerCourseMetadata[]         
}

model ConsumerCourseMetadata {
  id                  Int                   @id @default(autoincrement())
  consumerId          String    
  courseId            Int       
  status              CourseProgressStatus  @default(inProgress)
  walletTransactionId Int
  becknTransactionId  Int
  rating              Int?
  feedback            String?
  course              CourseInfo            @relation(fields: [courseId], references: [courseId])
  consumer            ConsumerMetadata      @relation(fields: [consumerId], references: [consumerId])

  @@unique([consumerId, courseId])
}

model CourseInfo {
  courseId            Int                     @id
  bppId               String
  title               String
  description         String
  credits             Int
  imageLink           String
  language            String[]
  courseLink          String
  providerName        String
  purchases           ConsumerCourseMetadata[]
}

model Admin {
  id        Int     @id @default(autoincrement())
  name      String  
  email     String  @unique
  password  String 
  walletId  Int     @unique
  wallet    Wallet  @relation(fields: [walletId], references: [walletId])
}

model Notification {
  id                  Int                 @id
  consumerId          String    
  text                String
  link                String
  status              NotificationStatus  @default(notViewed)
  consumer            ConsumerMetadata    @relation(fields: [consumerId], references: [consumerId])
}


// dummy wallet model
model Wallet {
  walletId   Int                  @id @default(autoincrement())
  type       WalletType
  status     WalletStatus         @default(active)
  credits    Int                  @default(0)
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  consumer   ConsumerMetadata? 
  admin      Admin? 
  transactionsFrom Transaction[]  @relation("FromTransaction")
  transactionsTo   Transaction[]  @relation("ToTransaction")
}

model Transaction {
  transactionId   Int               @id @default(autoincrement())
  fromId          Int  
  toId            Int
  credits         Int
  type            TransactionType
  description     String?
  createdAt       DateTime          @default(now())
  from            Wallet            @relation("FromTransaction", fields:[fromId], references:[walletId])
  to              Wallet            @relation("ToTransaction", fields:[toId], references:[walletId])
}

enum WalletType {
  admin
  provider
  consumer
}

enum WalletStatus {
  active
  inactive
  frozen
}

enum TransactionType {
  purchase
  creditRequest
  settlement
}